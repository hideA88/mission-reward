// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: server.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MissionRewardCommandService_PostLoginEvent_FullMethodName       = "/mission_reward.MissionRewardCommandService/PostLoginEvent"
	MissionRewardCommandService_PostKillMonsterEvent_FullMethodName = "/mission_reward.MissionRewardCommandService/PostKillMonsterEvent"
	MissionRewardCommandService_PostLevelUpEvent_FullMethodName     = "/mission_reward.MissionRewardCommandService/PostLevelUpEvent"
)

// MissionRewardCommandServiceClient is the client API for MissionRewardCommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MissionRewardCommandServiceClient interface {
	PostLoginEvent(ctx context.Context, in *PostLoginEventRequest, opts ...grpc.CallOption) (*PostLoginEventResponse, error)
	PostKillMonsterEvent(ctx context.Context, in *PostKillMonsterEventRequest, opts ...grpc.CallOption) (*PostKillMonsterEventResponse, error)
	PostLevelUpEvent(ctx context.Context, in *PostLevelUpEventRequest, opts ...grpc.CallOption) (*PostLevelUpEventResponse, error)
}

type missionRewardCommandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMissionRewardCommandServiceClient(cc grpc.ClientConnInterface) MissionRewardCommandServiceClient {
	return &missionRewardCommandServiceClient{cc}
}

func (c *missionRewardCommandServiceClient) PostLoginEvent(ctx context.Context, in *PostLoginEventRequest, opts ...grpc.CallOption) (*PostLoginEventResponse, error) {
	out := new(PostLoginEventResponse)
	err := c.cc.Invoke(ctx, MissionRewardCommandService_PostLoginEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionRewardCommandServiceClient) PostKillMonsterEvent(ctx context.Context, in *PostKillMonsterEventRequest, opts ...grpc.CallOption) (*PostKillMonsterEventResponse, error) {
	out := new(PostKillMonsterEventResponse)
	err := c.cc.Invoke(ctx, MissionRewardCommandService_PostKillMonsterEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionRewardCommandServiceClient) PostLevelUpEvent(ctx context.Context, in *PostLevelUpEventRequest, opts ...grpc.CallOption) (*PostLevelUpEventResponse, error) {
	out := new(PostLevelUpEventResponse)
	err := c.cc.Invoke(ctx, MissionRewardCommandService_PostLevelUpEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MissionRewardCommandServiceServer is the server API for MissionRewardCommandService service.
// All implementations must embed UnimplementedMissionRewardCommandServiceServer
// for forward compatibility
type MissionRewardCommandServiceServer interface {
	PostLoginEvent(context.Context, *PostLoginEventRequest) (*PostLoginEventResponse, error)
	PostKillMonsterEvent(context.Context, *PostKillMonsterEventRequest) (*PostKillMonsterEventResponse, error)
	PostLevelUpEvent(context.Context, *PostLevelUpEventRequest) (*PostLevelUpEventResponse, error)
	mustEmbedUnimplementedMissionRewardCommandServiceServer()
}

// UnimplementedMissionRewardCommandServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMissionRewardCommandServiceServer struct {
}

func (UnimplementedMissionRewardCommandServiceServer) PostLoginEvent(context.Context, *PostLoginEventRequest) (*PostLoginEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostLoginEvent not implemented")
}
func (UnimplementedMissionRewardCommandServiceServer) PostKillMonsterEvent(context.Context, *PostKillMonsterEventRequest) (*PostKillMonsterEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostKillMonsterEvent not implemented")
}
func (UnimplementedMissionRewardCommandServiceServer) PostLevelUpEvent(context.Context, *PostLevelUpEventRequest) (*PostLevelUpEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostLevelUpEvent not implemented")
}
func (UnimplementedMissionRewardCommandServiceServer) mustEmbedUnimplementedMissionRewardCommandServiceServer() {
}

// UnsafeMissionRewardCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MissionRewardCommandServiceServer will
// result in compilation errors.
type UnsafeMissionRewardCommandServiceServer interface {
	mustEmbedUnimplementedMissionRewardCommandServiceServer()
}

func RegisterMissionRewardCommandServiceServer(s grpc.ServiceRegistrar, srv MissionRewardCommandServiceServer) {
	s.RegisterService(&MissionRewardCommandService_ServiceDesc, srv)
}

func _MissionRewardCommandService_PostLoginEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostLoginEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionRewardCommandServiceServer).PostLoginEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MissionRewardCommandService_PostLoginEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionRewardCommandServiceServer).PostLoginEvent(ctx, req.(*PostLoginEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionRewardCommandService_PostKillMonsterEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostKillMonsterEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionRewardCommandServiceServer).PostKillMonsterEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MissionRewardCommandService_PostKillMonsterEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionRewardCommandServiceServer).PostKillMonsterEvent(ctx, req.(*PostKillMonsterEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionRewardCommandService_PostLevelUpEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostLevelUpEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionRewardCommandServiceServer).PostLevelUpEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MissionRewardCommandService_PostLevelUpEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionRewardCommandServiceServer).PostLevelUpEvent(ctx, req.(*PostLevelUpEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MissionRewardCommandService_ServiceDesc is the grpc.ServiceDesc for MissionRewardCommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MissionRewardCommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mission_reward.MissionRewardCommandService",
	HandlerType: (*MissionRewardCommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostLoginEvent",
			Handler:    _MissionRewardCommandService_PostLoginEvent_Handler,
		},
		{
			MethodName: "PostKillMonsterEvent",
			Handler:    _MissionRewardCommandService_PostKillMonsterEvent_Handler,
		},
		{
			MethodName: "PostLevelUpEvent",
			Handler:    _MissionRewardCommandService_PostLevelUpEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}

const (
	MissionRewardQueryService_UserStatus_FullMethodName = "/mission_reward.MissionRewardQueryService/UserStatus"
)

// MissionRewardQueryServiceClient is the client API for MissionRewardQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MissionRewardQueryServiceClient interface {
	UserStatus(ctx context.Context, in *UserStatusRequest, opts ...grpc.CallOption) (*UserStatusResponse, error)
}

type missionRewardQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMissionRewardQueryServiceClient(cc grpc.ClientConnInterface) MissionRewardQueryServiceClient {
	return &missionRewardQueryServiceClient{cc}
}

func (c *missionRewardQueryServiceClient) UserStatus(ctx context.Context, in *UserStatusRequest, opts ...grpc.CallOption) (*UserStatusResponse, error) {
	out := new(UserStatusResponse)
	err := c.cc.Invoke(ctx, MissionRewardQueryService_UserStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MissionRewardQueryServiceServer is the server API for MissionRewardQueryService service.
// All implementations must embed UnimplementedMissionRewardQueryServiceServer
// for forward compatibility
type MissionRewardQueryServiceServer interface {
	UserStatus(context.Context, *UserStatusRequest) (*UserStatusResponse, error)
	mustEmbedUnimplementedMissionRewardQueryServiceServer()
}

// UnimplementedMissionRewardQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMissionRewardQueryServiceServer struct {
}

func (UnimplementedMissionRewardQueryServiceServer) UserStatus(context.Context, *UserStatusRequest) (*UserStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserStatus not implemented")
}
func (UnimplementedMissionRewardQueryServiceServer) mustEmbedUnimplementedMissionRewardQueryServiceServer() {
}

// UnsafeMissionRewardQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MissionRewardQueryServiceServer will
// result in compilation errors.
type UnsafeMissionRewardQueryServiceServer interface {
	mustEmbedUnimplementedMissionRewardQueryServiceServer()
}

func RegisterMissionRewardQueryServiceServer(s grpc.ServiceRegistrar, srv MissionRewardQueryServiceServer) {
	s.RegisterService(&MissionRewardQueryService_ServiceDesc, srv)
}

func _MissionRewardQueryService_UserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionRewardQueryServiceServer).UserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MissionRewardQueryService_UserStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionRewardQueryServiceServer).UserStatus(ctx, req.(*UserStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MissionRewardQueryService_ServiceDesc is the grpc.ServiceDesc for MissionRewardQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MissionRewardQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mission_reward.MissionRewardQueryService",
	HandlerType: (*MissionRewardQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserStatus",
			Handler:    _MissionRewardQueryService_UserStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
